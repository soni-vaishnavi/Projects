# Import necessary libraries
from dotenv import load_dotenv  # Used to load environment variables from a .env file into the environment
import streamlit as st  # Streamlit is used for building interactive web apps
import os  # This module is used to interact with the operating system, such as accessing environment variables
import google.generativeai as genai  # Google Generative AI (Gemini) library for interacting with the generative model
import sqlite3  # SQLite database library for interacting with SQL databases

# Load all environment variables from the .env file into the environment
load_dotenv()

# Configure the Gemini model with the Google API key
# The API key is retrieved from the environment variables
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to load Gemini model and provide an SQL query as a response based on the input question and prompt
def get_gemini_response(question, prompt):
    # 'gemini-pro' is the version of the generative model being used
    model = genai.GenerativeModel('gemini-pro')
    
    # 'generate_content' uses the prompt and user question to generate a SQL query or relevant response
    response = model.generate_content([prompt[0], question])
    
    # Return the generated response text (which should be the SQL query)
    return response.text

# Function to retrieve SQL data based on the query generated by Gemini
def read_sql_query(sql, db):
    # Connect to the SQLite database
    conn = sqlite3.connect(db)
    
    # Create a cursor object to execute SQL commands
    cur = conn.cursor()
    
    # Execute the SQL query passed to the function
    cur.execute(sql)
    
    # Fetch all the rows that match the query
    rows = cur.fetchall()
    
    # Commit the transaction to ensure data consistency (though in this case, it's only reading data)
    conn.commit()
    
    # Close the database connection
    conn.close()

    # Print all the rows (mainly for debugging purposes)
    for row in rows:
        print(row)
    
    # Return the fetched rows (data) to be used in the Streamlit app
    return rows

# Define the prompt that will guide the Gemini model on how to convert natural language into SQL
prompt = ["""
You are a helpful assistant that converts natural language questions into SQL queries.
The database contains a table called 'student' with the following columns:
- Name (varchar)
- class (varchar)
- section (varchar)
- marks (int)

Given a user's question, translate it into an appropriate SQL query that retrieves data from the 'student' table.

Example:
Question: "Show all students with marks greater than 75."
SQL Query: SELECT * FROM student WHERE marks > 75;

Now, convert the following question into a valid SQL query:
"""]

# Streamlit section: Defines the UI part of the app
# Set up the page configuration of the Streamlit app
st.set_page_config(page_title="I can retrieve any SQL query")  # Title of the web page

# Add a header to the web app
st.header("Gemini app to retrieve SQL data")  # Heading displayed on the web page

# Create a text input box for users to type their question
# 'question' stores the user's input from the text box
question = st.text_input("Input:", key="input")

# Create a button labeled "Ask the question" that users can click to submit their input
submit = st.button("Ask the question")

# If the submit button is clicked, the following will happen:
if submit:
    # Get the SQL query by calling the 'get_gemini_response' function with the user's question
    response = get_gemini_response(question, prompt)
    
    # Print the SQL query generated by Gemini (mainly for debugging purposes)
    print(response)
    
    # Retrieve the data from the SQLite database using the generated SQL query
    data = read_sql_query(response, "student.db")
    
    # Display the result on the web page
    st.subheader("The response is:")
    
    # Loop through each row in the returned data and display it as a header
    for row in data:
        print(row)  # Print each row (mainly for debugging)
        st.header(row)  # Display the row on the web page
